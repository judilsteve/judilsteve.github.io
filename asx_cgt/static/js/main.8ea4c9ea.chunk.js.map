{"version":3,"sources":["hooks/useSharedState.js","sharedState.js","components/parcelList.jsx","components/select.jsx","hooks/useAvailableParcels.js","hooks/useAllEventsOrdered.js","components/adjustmentList.jsx","components/importExport.jsx","components/saleList.jsx","components/donateButton.jsx","App.jsx","index.js"],"names":["SharedPersistedState","localStorageKey","initialValue","persistedJson","window","localStorage","getItem","persistedData","JSON","parse","watch","s","setItem","stringify","this","value","watchers","watcher","push","length","index","splice","newValue","useSharedState","sharedState","useState","setValue","useEffect","watcherIndex","removeWatcher","parcels","adjustments","sales","ParcelList","sharedStateParcels","setParcels","orderedParcels","useMemo","orderBy","p","date","nextId","maxId","maxBy","id","undefined","charCodeBeforeCapitalA","charCodeAt","numericMaxId","pow","i","Math","numericNextId","modulo","String","fromCharCode","floor","newParcelActive","setNewParcelActive","lastRow","EditParcelRow","cancel","save","TableRow","TableCell","align","colSpan","IconButton","onClick","Add","parcelIdsBeingEdited","setParcelIdsBeingEdited","stopEditingParcel","filter","id2","saveParcel","p2","TableContainer","component","Paper","Table","style","minWidth","size","TableHead","TableBody","map","includes","parcel","scope","dayjs","format","asxCode","isDrp","memo","units","unitPrice","brokerage","Edit","Delete","props","setDate","setAsxCode","setIsDrp","setMemo","setUnits","setUnitPrice","setBrokerage","toString","unitsValid","isNaN","parseFloat","parseInt","unitPriceValid","brokerageValid","valid","disableToolbar","variant","label","error","onChange","e","toJSON","TextField","target","FormControlLabel","control","Switch","type","disabled","Done","Clear","Select","children","renderValue","multiple","FormControl","fullWidth","InputLabel","MenuProps","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","labelId","processEvent","event","currentHoldings","errorOnMissingParcel","remainingUnits","perUnitCostBase","totalApplicableUnits","applicableParcelIds","applicableParcelId","Error","netAmount","applicableParcels","applicableParcel","unitsSold","getAvailableParcelsLookup","allEventsOrdered","eventIdToExclude","available","useAvailableParcels","Object","values","useAllEventsOrdered","sharedStateAdjustments","sharedStateSales","a","AdjustmentList","setAdjustments","orderedAdjustments","newAdjustmentActive","setNewAdjustmentActive","EditAdjustmentRow","adjustmentIdsBeingEdited","setAdjustmentIdsBeingEdited","stopEditingAdjustment","saveAdjustment","a2","errorRowIds","rowIds","Set","adjustment","availableParcels","add","has","Tooltip","title","Warning","color","join","setApplicableParcelIds","setNetAmount","netAmountValid","find","selected","MenuItem","Checkbox","checked","ListItemText","primary","secondary","uuidv4","ImportExport","parcelsSharedState","adjustmentsSharedState","salesSharedState","setSales","setError","message","setMessage","importData","files","confirm","text","data","setTimeout","uploadRef","useRef","ref","accept","display","htmlFor","Button","current","click","jsonBlob","Blob","blobUrl","URL","createObjectURL","link","document","createElement","href","now","download","body","appendChild","dispatchEvent","MouseEvent","bubbles","cancelable","view","removeChild","margin","Typography","applyCgtDiscount","saleDate","parcelDate","cgtLiability","diff","calculateCgtLiability","sale","totalUnitsSold","parcelLiability","SaleList","ordered","lookup","decorations","errors","currentParcel","unitsAvailable","orderedSales","saleDataLookup","newSaleActive","setNewSaleActive","EditSaleRow","saleIdsBeingEdited","setSaleIdsBeingEdited","stopEditingSale","saveSale","s2","toFixed","unitsSoldLookup","setUnitsSoldLookup","newUnitsSoldLookup","allAvailableParcels","availableParcelsLookup","unitsSoldValid","pid","parcelSaleIsValid","canCalculatePerUnitCgtLiabilities","perUnitCgtLiabilityLookup","floatUnitPrice","liability","orderedAvailableParcels","rebuildUnitsSoldLookup","useCallback","newApplicableParcelIds","parcelId","ids","rowSpan","ApplicableParcel","perUnitCgtLiability","setUnitsSold","u","newUnitsSold","updateUnitsSold","soldFloat","soldInt","saleValid","helperText","DonateButton","action","method","name","src","border","alt","width","height","App","repoUrl","Container","maxWidth","ReactDOM","render","StrictMode","utils","DayjsUtils","getElementById"],"mappings":"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","file":"static/js/main.8ea4c9ea.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport class SharedState {\n    constructor(initialValue) {\n        this.value = initialValue;\n        this.watchers = [];\n    }\n\n    watch(watcher) {\n        this.watchers.push(watcher);\n        return this.watchers.length - 1;\n    }\n\n    removeWatcher(index) {\n        this.watchers.splice(index, 1);\n    }\n\n    setValue(newValue) {\n        this.value = newValue;\n        for(const watcher of this.watchers) {\n            watcher(newValue);\n        }\n    }\n}\n\nexport class SharedPersistedState extends SharedState {\n    constructor(localStorageKey, initialValue) {\n        const persistedJson = window.localStorage.getItem(localStorageKey);\n        const persistedData = persistedJson === null ? initialValue : JSON.parse(persistedJson);\n        super(persistedData);\n        this.watch(s => window.localStorage.setItem(localStorageKey, JSON.stringify(s)));\n    }\n}\n\nexport function useSharedState(sharedState) {\n    const [value, setValue] = useState(sharedState.value);\n    useEffect(() => {\n        const watcherIndex = sharedState.watch(setValue);\n        return () => sharedState.removeWatcher(watcherIndex);\n    }, [sharedState]);\n    return [value, newValue => sharedState.setValue(newValue)];\n}","import { SharedPersistedState } from './hooks/useSharedState';\n\nexport const parcels = new SharedPersistedState('parcels', []);\nexport const adjustments = new SharedPersistedState('adjustments', []);\nexport const sales = new SharedPersistedState('sales', []);","import React, { useEffect, useMemo, useState } from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    IconButton,\n    TextField,\n    FormControlLabel,\n    Switch\n} from '@material-ui/core';\nimport {\n    Delete,\n    Add,\n    Done,\n    Clear,\n    Edit\n} from '@material-ui/icons';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport dayjs from 'dayjs';\nimport { useSharedState } from '../hooks/useSharedState';\nimport { parcels as sharedStateParcels } from '../sharedState';\nimport { maxBy, orderBy } from 'lodash-es';\n\nexport default function ParcelList() {\n    const [parcels, setParcels] = useSharedState(sharedStateParcels);\n    const orderedParcels = useMemo(() => orderBy(parcels, p => p.date), [parcels]);\n\n    const nextId = useMemo(() => {\n        const maxId = maxBy(parcels, p => p.id)?.id;\n        if(maxId === undefined) return 'A';\n\n        const charCodeBeforeCapitalA = 'A'.charCodeAt(0) - 1;\n        let numericMaxId = 0;\n        let pow = 0;\n        for(let i = maxId.length - 1; i >= 0; i--) {\n            numericMaxId += (maxId.charCodeAt(i) - charCodeBeforeCapitalA) * Math.pow(26, pow++);\n        }\n\n        let numericNextId = numericMaxId + 1;\n        let nextId = '';\n        while (numericNextId)\n        {\n            const modulo = (numericNextId - 1) % 26;\n            nextId = String.fromCharCode(65 + modulo) + nextId;\n            numericNextId = Math.floor((numericNextId - modulo) / 26);\n        }\n\n        return nextId;\n    }, [parcels]);\n\n    const [newParcelActive, setNewParcelActive] = useState(false);\n    const saveNewParcel = p => {\n        setParcels([...parcels, p]);\n        setNewParcelActive(false);\n    }\n    const lastRow = newParcelActive ?\n        <EditParcelRow id={nextId} cancel={() => setNewParcelActive(false)} save={saveNewParcel}/> : \n        <TableRow>\n            <TableCell align=\"right\" colSpan={9}><IconButton onClick={() => setNewParcelActive(true)}><Add/></IconButton></TableCell>\n        </TableRow>\n\n    const [parcelIdsBeingEdited, setParcelIdsBeingEdited] = useState([]);\n    const editParcel = id => setParcelIdsBeingEdited([...parcelIdsBeingEdited, id]);\n    const stopEditingParcel = id => setParcelIdsBeingEdited(parcelIdsBeingEdited.filter(id2 => id2 !== id));\n    const saveParcel = p => {\n        setParcels([...parcels.filter(p2 => p2.id !== p.id), p]);\n        stopEditingParcel(p.id);\n    };\n\n    return <TableContainer component={Paper}>\n        <Table style={{ minWidth: 650 }} size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell align=\"right\">Date Acquired</TableCell>\n                    <TableCell align=\"right\">ASX Code</TableCell>\n                    <TableCell align=\"right\">Parcel Type</TableCell>\n                    <TableCell align=\"right\">Memo</TableCell>\n                    <TableCell align=\"right\">Units</TableCell>\n                    <TableCell align=\"right\">Unit Price ($/u)</TableCell>\n                    <TableCell align=\"right\">Brokerage ($)</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {/* TODO_JU Expandable detail log that lists the history of a parcel (adjustments and sales) */}\n                {orderedParcels.map(p => parcelIdsBeingEdited.includes(p.id) ?\n                    <EditParcelRow key={p.id} id={p.id} parcel={p} cancel={() => stopEditingParcel(p.id)} save={saveParcel}/> :\n                    <TableRow key={p.id}>\n                        <TableCell component=\"th\" scope=\"row\">{p.id}</TableCell>\n                        <TableCell align=\"right\">{dayjs(p.date).format('YYYY-MM-DD')}</TableCell>\n                        <TableCell align=\"right\">{p.asxCode}</TableCell>\n                        <TableCell align=\"right\">{p.isDrp ? 'Dividend Reinvestment' : 'Purchase'}</TableCell>\n                        <TableCell align=\"right\">{p.memo}</TableCell>\n                        <TableCell align=\"right\">{p.units}</TableCell>\n                        <TableCell align=\"right\">{p.unitPrice}</TableCell>\n                        <TableCell align=\"right\">{p.brokerage}</TableCell>\n                        <TableCell align=\"right\">\n                            <IconButton size=\"small\" onClick={() => editParcel(p.id)}><Edit/></IconButton>\n                            <IconButton size=\"small\" onClick={() => setParcels(parcels.filter(p2 => p2.id !== p.id))}><Delete/></IconButton>\n                        </TableCell>\n                    </TableRow>\n                )}\n                {lastRow}\n            </TableBody>\n        </Table>\n    </TableContainer>\n}\n\nfunction EditParcelRow(props) {\n    const {\n        id,\n        save,\n        cancel,\n        parcel\n    } = props;\n\n    const [date, setDate] = useState(null);\n    const [asxCode, setAsxCode] = useState('');\n    const [isDrp, setIsDrp] = useState(false);\n    const [memo, setMemo] = useState('');\n    const [units, setUnits] = useState('');\n    const [unitPrice, setUnitPrice] = useState('');\n    const [brokerage, setBrokerage] = useState('');\n\n    useEffect(() => {\n        setDate(parcel?.date ?? null);\n        setAsxCode(parcel?.asxCode ?? '');\n        setIsDrp(parcel?.isDrp ?? false);\n        setMemo(parcel?.memo ?? '');\n        setUnits(parcel?.units.toString() ?? '');\n        setUnitPrice(parcel?.unitPrice.toString() ?? '');\n        setBrokerage(parcel?.brokerage.toString() ?? '');\n    }, [parcel]);\n\n    const boundSave = () => save({\n        id,\n        date,\n        asxCode,\n        isDrp,\n        memo,\n        units: parseInt(units),\n        unitPrice: parseFloat(unitPrice),\n        brokerage: isDrp ? 0 : parseFloat(brokerage)\n    });\n\n    const unitsValid = units && !isNaN(parseFloat(units)) && parseInt(units) === parseFloat(units);\n    const unitPriceValid = unitPrice && !isNaN(parseFloat(unitPrice));\n    const brokerageValid = isDrp || (brokerage && !isNaN(parseFloat(brokerage)));\n\n    const valid = date && asxCode && unitsValid && unitPriceValid && brokerageValid;\n\n    return <TableRow>\n        <TableCell component=\"th\" scope=\"row\">{id}</TableCell>\n        <TableCell align=\"right\">\n            <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"YYYY-MM-DD\"\n                label=\"Date\"\n                value={date}\n                error={!date}\n                onChange={e => setDate(e.toJSON())}\n            />\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField value={asxCode} onChange={e => setAsxCode(e.target.value)} error={!asxCode} label=\"ASX Code\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <FormControlLabel control={<Switch value={isDrp} onChange={() => setIsDrp(!isDrp)}/>} label=\"Dividend Reinvestment\" />\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField value={memo} onChange={e => setMemo(e.target.value)} label=\"Memo\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField type=\"number\" value={units} onChange={e => setUnits(e.target.value)} error={!unitsValid} label=\"Units\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField type=\"number\" value={unitPrice} onChange={e => setUnitPrice(e.target.value)} error={!unitPriceValid} label=\"Unit Price ($/u)\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField type=\"number\" disabled={isDrp} value={isDrp ? '0.00' : brokerage} onChange={e => setBrokerage(e.target.value)} error={!isDrp && !brokerageValid} label=\"Brokerage ($)\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <IconButton onClick={boundSave} disabled={!valid}><Done/></IconButton>\n            <IconButton onClick={cancel}><Clear/></IconButton>\n        </TableCell>\n    </TableRow>\n}","import React from 'react';\nimport { FormControl, InputLabel, Select as MatSelect } from '@material-ui/core';\n\nexport default function Select(props) {\n    const {\n        disabled,\n        error,\n        value,\n        onChange,\n        children,\n        renderValue,\n        multiple,\n        id,\n        label\n    } = props;\n\n    // Renders popover *below* the dropdown instead of on top of it\n    const selectProps = {\n        anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n        },\n        transformOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n        },\n        getContentAnchorEl: null\n    };\n\n    return <FormControl fullWidth>\n        <InputLabel id={id}>{label}</InputLabel>\n        <MatSelect\n            MenuProps={selectProps}\n            disabled={disabled}\n            labelId={id}\n            error={error}\n            multiple={multiple}\n            fullWidth\n            value={value}\n            onChange={onChange}\n            renderValue={renderValue}>\n            {children}\n        </MatSelect>\n    </FormControl>;\n}","import { useMemo } from 'react';\n\nexport function processEvent(event, currentHoldings, errorOnMissingParcel) {\n    switch(event.type) {\n        case 'ACQUISITION':\n            currentHoldings[event.id] = {\n                id: event.id,\n                date: event.date,\n                memo: event.memo,\n                asxCode: event.asxCode,\n                remainingUnits: event.units,\n                perUnitCostBase: (event.units * event.unitPrice + event.brokerage) / event.units\n            };\n            break;\n        case 'ADJUSTMENT':\n            let totalApplicableUnits = 0;\n            for(const applicableParcelId of event.applicableParcelIds) {\n                const parcel = currentHoldings[applicableParcelId];\n                if(!parcel) {\n                    if(errorOnMissingParcel)\n                        throw new Error(`Adjustment ${event.id} was applicable to non-existent parcel ${applicableParcelId}`);\n                    else continue;\n                }\n                totalApplicableUnits += parcel.remainingUnits;\n            }\n            for(const applicableParcelId of event.applicableParcelIds) {\n                const parcel = currentHoldings[applicableParcelId];\n                if(!parcel) continue;\n                parcel.perUnitCostBase += event.netAmount / totalApplicableUnits;\n            }\n            break;\n        case 'SALE':\n            for(const applicableParcel of event.applicableParcels) {\n                const parcel = currentHoldings[applicableParcel.id];\n                if(!parcel) {\n                    if(errorOnMissingParcel)\n                        throw new Error(`Sale ${event.id} was applicable to non-existent parcel ${applicableParcel.id}`);\n                    else continue;\n                }\n                parcel.remainingUnits -= applicableParcel.unitsSold;\n            }\n            break;\n        default:\n            throw new Error(`Unrecognised event type ${event.type}`);\n    }\n}\n\n// TODO_JU? Some sort of lazy memoised repository for this, to improve performance\nexport function getAvailableParcelsLookup(allEventsOrdered, date, errorOnMissingParcel, eventIdToExclude) {\n    const available = {};\n\n    for(const event of allEventsOrdered) {\n        if(event.id === eventIdToExclude) continue;\n        if(date !== null && event.date > date) break;\n        processEvent(event, available, errorOnMissingParcel);\n    }\n    return available;\n}\n\nexport default function useAvailableParcels(allEventsOrdered, date, errorOnMissingParcel, eventIdToExclude) {\n    return useMemo(() => {\n        const available = getAvailableParcelsLookup(allEventsOrdered, date, errorOnMissingParcel, eventIdToExclude);\n        return Object.values(available);\n    }, [allEventsOrdered, date, errorOnMissingParcel, eventIdToExclude]);\n}","import { useMemo } from 'react';\nimport { useSharedState } from './useSharedState';\nimport { parcels as sharedStateParcels, adjustments as sharedStateAdjustments, sales as sharedStateSales } from '../sharedState';\nimport { orderBy } from 'lodash-es';\n\nexport default function useAllEventsOrdered() {\n    const [parcels, ] = useSharedState(sharedStateParcels);\n    const [adjustments, ] = useSharedState(sharedStateAdjustments);\n    const [sales, ] = useSharedState(sharedStateSales);\n    return useMemo(() =>\n        orderBy([\n            ...parcels.map(p => ({ type: 'ACQUISITION', ...p })),\n            ...adjustments.map(a => ({ type: 'ADJUSTMENT', ...a })),\n            ...sales.map(s => ({ type: 'SALE', ...s })),\n        ], [\n            e => e.date,\n            // Tiebreaking logic:\n            // Acquisitions should be before sales, to make sure all parcels are available for sale\n            // Positive Adjustments should be after buys and before sales, to allow user to maximise cost base\n            // Negative Adjustments should be after sales, to maximise cost base\n            // BUY -> +ADJ -> SALE -> -ADJ\n            e =>\n                e.type === 'ACQUISITION' ? 1 :\n                (e.type === 'ADJUSTMENT' && e.netAmount > 0) ? 2 :\n                e.type === 'SALE' ? 3 :\n                4\n        ])\n    , [parcels, adjustments, sales]);\n}","import React, { useEffect, useMemo, useState } from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    IconButton,\n    TextField,\n    MenuItem,\n    Checkbox,\n    ListItemText,\n    Tooltip\n} from '@material-ui/core';\nimport {\n    Delete,\n    Add,\n    Done,\n    Clear,\n    Edit,\n    Warning\n} from '@material-ui/icons';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport dayjs from 'dayjs';\nimport Select from './select';\nimport useAvailableParcels, { getAvailableParcelsLookup } from '../hooks/useAvailableParcels';\nimport { useSharedState } from '../hooks/useSharedState';\nimport { adjustments as sharedStateAdjustments } from '../sharedState';\nimport { orderBy } from 'lodash-es';\nimport { v4 as uuidv4 } from 'uuid';\nimport useAllEventsOrdered from '../hooks/useAllEventsOrdered';\n\nexport default function AdjustmentList() {\n    const [adjustments, setAdjustments] = useSharedState(sharedStateAdjustments);\n    const orderedAdjustments = useMemo(() => orderBy(adjustments, a => a.date), [adjustments]);\n\n    const [newAdjustmentActive, setNewAdjustmentActive] = useState(false);\n    const saveNewAdjustment = a => {\n        setAdjustments([...adjustments, a]);\n        setNewAdjustmentActive(false);\n    }\n    const lastRow = newAdjustmentActive ?\n        <EditAdjustmentRow cancel={() => setNewAdjustmentActive(false)} save={saveNewAdjustment}/> : \n        <TableRow>\n            <TableCell align=\"right\" colSpan={6}><IconButton onClick={() => setNewAdjustmentActive(true)}><Add/></IconButton></TableCell>\n        </TableRow>\n\n    const [adjustmentIdsBeingEdited, setAdjustmentIdsBeingEdited] = useState([]);\n    const editAdjustment = id => setAdjustmentIdsBeingEdited([...adjustmentIdsBeingEdited, id]);\n    const stopEditingAdjustment = id => setAdjustmentIdsBeingEdited(adjustmentIdsBeingEdited.filter(id2 => id2 !== id));\n    const saveAdjustment = a => {\n        setAdjustments([...adjustments.filter(a2 => a2.id !== a.id), a]);\n        stopEditingAdjustment(a.id);\n    };\n\n    const allEventsOrdered = useAllEventsOrdered();\n\n    const errorRowIds = useMemo(() => {\n        const rowIds = new Set();\n        for(const adjustment of adjustments) {\n            const availableParcels = getAvailableParcelsLookup(allEventsOrdered, adjustment.date, /*errorOnMissingParcel:*/false);\n            for(const parcelId of adjustment.applicableParcelIds) {\n                const parcel = availableParcels[parcelId];\n                if(parcel === undefined || parcel.remainingUnits <= 0) {\n                    rowIds.add(adjustment.id);\n                    break;\n                }\n            }\n        }\n        return rowIds;\n    }, [allEventsOrdered, adjustments]);\n\n    return <TableContainer component={Paper}>\n        <Table style={{ minWidth: 650 }} size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell/>\n                    <TableCell align=\"right\">Date</TableCell>\n                    <TableCell align=\"right\">Applicable Parcels</TableCell>\n                    <TableCell align=\"right\">Memo</TableCell>\n                    <TableCell align=\"right\">Net Amount ($)</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {/* TODO_JU Expandable detail log that lists the effects of an adjustment */}\n                {orderedAdjustments.map(a => adjustmentIdsBeingEdited.includes(a.id) ?\n                    <EditAdjustmentRow key={a.id} id={a.id} adjustment={a} cancel={() => stopEditingAdjustment(a.id)} save={saveAdjustment}/> :\n                    <TableRow key={a.id}>\n                        <TableCell>{ errorRowIds.has(a.id) ? \n                            <Tooltip title=\"One or more applicable parcels do not exist or have been entirely sold before the adjustment date.\">\n                                <Warning color=\"error\"/>\n                            </Tooltip> :\n                            <></> }\n                        </TableCell>\n                        <TableCell align=\"right\">{dayjs(a.date).format('YYYY-MM-DD')}</TableCell>\n                        <TableCell align=\"right\">{a.applicableParcelIds.join(', ')}</TableCell>\n                        <TableCell align=\"right\">{a.memo}</TableCell>\n                        <TableCell align=\"right\">{a.netAmount}</TableCell>\n                        <TableCell align=\"right\">\n                            <IconButton size=\"small\" onClick={() => editAdjustment(a.id)}><Edit/></IconButton>\n                            <IconButton size=\"small\" onClick={() => setAdjustments(adjustments.filter(a2 => a2.id !== a.id))}><Delete/></IconButton>\n                        </TableCell>\n                    </TableRow>\n                )}\n                {lastRow}\n            </TableBody>\n        </Table>\n    </TableContainer>\n}\n\nfunction EditAdjustmentRow(props) {\n    const {\n        id,\n        save,\n        cancel,\n        adjustment\n    } = props;\n\n    const [date, setDate] = useState(null);\n    const [applicableParcelIds, setApplicableParcelIds] = useState([]);\n    const [memo, setMemo] = useState('');\n    const [netAmount, setNetAmount] = useState('');\n\n    useEffect(() => {\n        setDate(adjustment?.date ?? null);\n        setApplicableParcelIds(adjustment?.applicableParcelIds ?? []);\n        setMemo(adjustment?.memo ?? '');\n        setNetAmount(adjustment?.netAmount.toString() ?? '');\n    }, [adjustment]);\n\n    const boundSave = () => save({\n        id: id ?? uuidv4(),\n        date,\n        applicableParcelIds,\n        memo,\n        netAmount: parseFloat(netAmount)\n    });\n\n    const netAmountValid = netAmount && !isNaN(parseFloat(netAmount));\n    const valid = date && applicableParcelIds.length && netAmountValid;\n\n    const availableParcels = useAvailableParcels(useAllEventsOrdered(), date, /*errorOnMissingParcel:*/false);\n\n    useEffect(() => {\n        setApplicableParcelIds(applicableParcelIds =>\n            applicableParcelIds.filter(id => availableParcels.find(p => p.id === id)));\n    }, [availableParcels]);\n\n    return <TableRow>\n        <TableCell/>\n        <TableCell align=\"right\">\n            <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"YYYY-MM-DD\"\n                label=\"Date\"\n                value={date}\n                error={!date}\n                onChange={e => setDate(e.toJSON())}\n            />\n        </TableCell>\n        <TableCell align=\"right\">\n            <Select\n                disabled={!date || !availableParcels.length}\n                id=\"applicable-parcel-select\"\n                label=\"Applicable Parcels\"\n                error={!applicableParcelIds.length}\n                multiple\n                value={applicableParcelIds}\n                onChange={e => setApplicableParcelIds(e.target.value)}\n                renderValue={selected => selected.join(', ')}>\n                {availableParcels.map(p =>\n                    <MenuItem key={p.id} value={p.id}>\n                        <Checkbox checked={applicableParcelIds.includes(p.id)} />\n                        <ListItemText primary={`${p.id}${p.memo ? ': ' + p.memo : ''}`} secondary={`${p.remainingUnits}x ${p.asxCode}, acquired ${dayjs(p.date).format('YYYY-MM-DD')}`}/>\n                    </MenuItem>)}\n            </Select>\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField value={memo} onChange={e => setMemo(e.target.value)} label=\"Memo\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <TextField type=\"number\" value={netAmount} onChange={e => setNetAmount(e.target.value)} error={!netAmountValid} label=\"Net Amount ($)\"/>\n        </TableCell>\n        <TableCell align=\"right\">\n            <IconButton onClick={boundSave} disabled={!valid}><Done/></IconButton>\n            <IconButton onClick={cancel}><Clear/></IconButton>\n        </TableCell>\n    </TableRow>\n}","import { Button, Typography } from '@material-ui/core';\nimport React, { useRef, useState } from 'react';\nimport { useSharedState } from '../hooks/useSharedState';\nimport { parcels as parcelsSharedState, adjustments as adjustmentsSharedState, sales as salesSharedState } from '../sharedState';\nimport dayjs from 'dayjs';\n\nexport default function ImportExport() {\n    const [parcels, setParcels] = useSharedState(parcelsSharedState);\n    const [adjustments, setAdjustments] = useSharedState(adjustmentsSharedState);\n    const [sales, setSales] = useSharedState(salesSharedState);\n    const [error, setError] = useState(null);\n    const [message, setMessage] = useState(null);\n\n    const importData = async files => {\n        if(!window.confirm(`WARNING: Importing this file will completely and irreversibly replace any data currently entered. Continue?`)) return;\n\n        setError(null);\n        setMessage(null);\n\n        let data;\n        try {\n            data = JSON.parse(await files[0].text());\n        } catch(e) {\n            setError('File was not valid JSON. Ensure that you have selected the correct file and try again.');\n            throw e;\n        }\n        if(!data.parcels || !data.adjustments || !data.sales) {\n            setError('File appears malformed. Ensure that you have selected the correct file and try again.');\n            return;\n        }\n        // TODO_JU? Further schema validation\n\n        setParcels(data.parcels);\n        setAdjustments(data.adjustments);\n        setSales(data.sales);\n\n        setMessage('Import successful');\n        setTimeout(() => setMessage(null), 1000 * 30);\n    };\n\n    const exportData = () => {\n        const jsonBlob = new Blob([JSON.stringify({\n            parcels,\n            adjustments,\n            sales\n        })]);\n        const blobUrl = URL.createObjectURL(jsonBlob);\n        const link = document.createElement(\"a\");\n        link.href = blobUrl;\n        const now = dayjs();\n        link.download = `Holdings_${now.format(`YYYY-MM-DD_Thh-mm-ss`)}.json`;\n        document.body.appendChild(link);\n        link.dispatchEvent( new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            view: window\n        }));\n        document.body.removeChild(link);\n    };\n\n    const uploadRef = useRef(null);\n\n    return <>\n        <input\n            ref={uploadRef}\n            onChange={e => importData(e.target.files)}\n            accept=\"application/json\"\n            style={{ display: 'none' }}\n            id=\"import-file-input\"\n            type=\"file\"/>\n        <label htmlFor=\"import-file-input\">\n            <Button onClick={() => uploadRef.current?.click()} variant=\"contained\" color=\"primary\">Import Holdings</Button>\n        </label>\n        <Button onClick={exportData} style={{margin: 10}} variant=\"contained\" color=\"primary\">Export Holdings</Button>\n        { !error && !message && <><br/><Typography color=\"textSecondary\" variant=\"body2\">NOTE: Importing holdings will completely and irreversibly replace any data currently entered</Typography></> }\n        { error && <><br/><Typography color=\"error\" variant=\"body2\">{error}</Typography></> }\n        { message && <><br/><Typography color=\"textSecondary\" variant=\"body2\">{message}</Typography></> }\n    </>;\n}","import React, { useEffect, useMemo, useState, useCallback } from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    IconButton,\n    TextField,\n    MenuItem,\n    Checkbox,\n    ListItemText,\n    Typography,\n    Tooltip\n} from '@material-ui/core';\nimport {\n    Delete,\n    Add,\n    Done,\n    Clear,\n    Edit,\n    Warning\n} from '@material-ui/icons';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport dayjs from 'dayjs';\nimport Select from './select';\nimport { useSharedState } from '../hooks/useSharedState';\nimport useAllEventsOrdered from '../hooks/useAllEventsOrdered';\nimport useAvailableParcels, { processEvent } from '../hooks/useAvailableParcels';\nimport { sales as sharedStateSales } from '../sharedState';\nimport { orderBy } from 'lodash-es';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction applyCgtDiscount(saleDate, parcelDate, cgtLiability) {\n    if(cgtLiability > 0 && dayjs(saleDate).diff(dayjs(parcelDate), 'year', true) > 1)\n        cgtLiability /= 2;\n    return cgtLiability;\n}\n\nfunction calculateCgtLiability(sale) {\n    let cgtLiability = 0;\n    let totalUnitsSold = 0;\n    for(const parcel of sale.applicableParcels) {\n        totalUnitsSold += parcel.unitsSold;\n    }\n    for(const parcel of sale.applicableParcels) {\n        let parcelLiability = (sale.unitPrice * parcel.unitsSold);\n        parcelLiability -= parcel.unitsSold * parcel.perUnitCostBase;\n        parcelLiability -= sale.brokerage * (parcel.unitsSold / totalUnitsSold);\n        cgtLiability += applyCgtDiscount(sale.date, parcel.date, parcelLiability);\n    }\n    return cgtLiability;\n}\n\nexport default function SaleList() {\n    const [sales, setSales] = useSharedState(sharedStateSales);\n    const allEventsOrdered = useAllEventsOrdered();\n    const { orderedSales, saleDataLookup } = useMemo(() => {\n        const ordered = [];\n        const lookup = {};\n        const currentHoldings = {};\n        for(const event of allEventsOrdered) {\n            if(event.type === 'SALE') {\n                const decorations = { errors: [], applicableParcels: [] };\n                for(const parcel of event.applicableParcels) {\n                    const currentParcel = currentHoldings[parcel.id];\n                    if(!currentParcel)\n                        decorations.errors.push(`Parcel ${parcel.id} did not exist at the sale date`);\n                    else if(currentParcel.asxCode !== event.asxCode)\n                        decorations.errors.push(`Parcel ${parcel.id} has the wrong ASX Code`);\n                    else if(currentParcel.remainingUnits < parcel.unitsSold)\n                        decorations.errors.push(`Parcel ${parcel.id} does not have enough remaining units to complete sale`);\n                    decorations.applicableParcels.push({ ...parcel, unitsAvailable: currentParcel?.remainingUnits ?? '??' });\n                }\n                decorations.cgtLiability = decorations.errors.length ? null : calculateCgtLiability({\n                    unitPrice: event.unitPrice,\n                    date: event.date,\n                    brokerage: event.brokerage,\n                    applicableParcels: decorations.applicableParcels.map(p => ({\n                        date: currentHoldings[p.id].date,\n                        perUnitCostBase: currentHoldings[p.id].perUnitCostBase,\n                        unitsSold: p.unitsSold\n                    }))\n                });\n                ordered.push(event);\n                lookup[event.id] = decorations;\n            }\n            processEvent(event, currentHoldings, /*errorOnMissingParcel:*/false);\n        }\n        return { orderedSales: ordered, saleDataLookup: lookup };\n    }, [allEventsOrdered]);\n\n    const [newSaleActive, setNewSaleActive] = useState(false);\n    const saveNewSale = s => {\n        setSales([...sales, s]);\n        setNewSaleActive(false);\n    }\n\n    const lastRow = newSaleActive ?\n        <EditSaleRow cancel={() => setNewSaleActive(false)} save={saveNewSale} allEventsOrdered={allEventsOrdered}/> : \n        <TableRow>\n            <TableCell align=\"right\" colSpan={9}><IconButton onClick={() => setNewSaleActive(true)}><Add/></IconButton></TableCell>\n        </TableRow>\n\n    const [saleIdsBeingEdited, setSaleIdsBeingEdited] = useState([]);\n    const editSale = id => setSaleIdsBeingEdited([...saleIdsBeingEdited, id]);\n    const stopEditingSale = id => setSaleIdsBeingEdited(saleIdsBeingEdited.filter(id2 => id2 !== id));\n    const saveSale = s => {\n        setSales([...sales.filter(s2 => s2.id !== s.id), s]);\n        stopEditingSale(s.id);\n    };\n\n    return <TableContainer component={Paper}>\n        <Table style={{ minWidth: 650 }} size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell/>\n                    <TableCell align=\"right\">Date</TableCell>\n                    <TableCell align=\"right\">ASX Code</TableCell>\n                    <TableCell align=\"right\">Applicable Parcels</TableCell>\n                    <TableCell align=\"right\">Memo</TableCell>\n                    <TableCell align=\"right\">Unit Price ($/u)</TableCell>\n                    <TableCell align=\"right\">Brokerage ($)</TableCell>\n                    <TableCell align=\"right\"><Typography variant=\"body2\" color=\"primary\">CGT Liability ($)</Typography></TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {/* TODO_JU Expandable detail log that lists the parcels/portions sold, their cost bases, and 50% CGT discounts (where applicable) */}\n                {orderedSales.map(s => saleIdsBeingEdited.includes(s.id) ?\n                    <EditSaleRow key={s.id} id={s.id} sale={s} cancel={() => stopEditingSale(s.id)} save={saveSale} allEventsOrdered={allEventsOrdered}/> :\n                    <TableRow key={s.id}>\n                        <TableCell>{ saleDataLookup[s.id].errors.length ?\n                            saleDataLookup[s.id].errors.map(e => <Tooltip key={e} title={e}>\n                                <Warning color=\"error\"/>\n                            </Tooltip>) :\n                            <></> }</TableCell>\n                        <TableCell align=\"right\">{dayjs(s.date).format('YYYY-MM-DD')}</TableCell>\n                        <TableCell align=\"right\">{s.asxCode}</TableCell>\n                        <TableCell align=\"right\">{saleDataLookup[s.id].applicableParcels.map(p => `${p.id} (${p.unitsSold}/${p.unitsAvailable})`).join(', ')}</TableCell>\n                        <TableCell align=\"right\">{s.memo}</TableCell>\n                        <TableCell align=\"right\">{s.unitPrice}</TableCell>\n                        <TableCell align=\"right\">{s.brokerage}</TableCell>\n                        <TableCell align=\"right\"><Typography variant=\"body2\" color=\"primary\">{saleDataLookup[s.id].cgtLiability?.toFixed(4) ?? '??'}</Typography></TableCell>\n                        <TableCell align=\"right\">\n                            <IconButton size=\"small\" onClick={() => editSale(s.id)}><Edit/></IconButton>\n                            <IconButton size=\"small\" onClick={() => setSales(sales.filter(s2 => s2.id !== s.id))}><Delete/></IconButton>\n                        </TableCell>\n                    </TableRow>\n                )}\n                {lastRow}\n            </TableBody>\n        </Table>\n    </TableContainer>\n}\n\nfunction EditSaleRow(props) {\n    const {\n        id,\n        save,\n        cancel,\n        sale,\n        allEventsOrdered\n    } = props;\n\n    const [date, setDate] = useState(null);\n    const [asxCode, setAsxCode] = useState('');\n    const [applicableParcelIds, setApplicableParcelIds] = useState([]);\n    const [memo, setMemo] = useState('');\n    const [unitPrice, setUnitPrice] = useState('');\n    const [brokerage, setBrokerage] = useState('');\n    // Lookup from parcel ID to units sold (string) as input by user\n    const [unitsSoldLookup, setUnitsSoldLookup] = useState({});\n\n    useEffect(() => {\n        setDate(sale?.date ?? null);\n        setAsxCode(sale?.asxCode ?? '');\n        setApplicableParcelIds(sale?.applicableParcels.map(p => p.id) ?? []);\n        setMemo(sale?.memo ?? '');\n        setUnitPrice(sale?.unitPrice.toString() ?? '');\n        setBrokerage(sale?.brokerage.toString() ?? '');\n        const newUnitsSoldLookup = {};\n        for(const parcel of sale?.applicableParcels ?? []) {\n            newUnitsSoldLookup[parcel.id] = parcel.unitsSold.toString();\n        }\n        setUnitsSoldLookup(newUnitsSoldLookup);\n    }, [sale]);\n\n    const allAvailableParcels = useAvailableParcels(\n        allEventsOrdered, date, /*errorOnMissingParcel:*/false, /*eventIdToExclude:*/id);\n    const availableParcels = useMemo(() => {\n        if(asxCode) return allAvailableParcels.filter(p => p.asxCode === asxCode)\n        else return allAvailableParcels;\n    }, [allAvailableParcels, asxCode]);\n\n    const availableParcelsLookup = useMemo(() => {\n        const lookup = {};\n        for(const parcel of availableParcels) {\n            lookup[parcel.id] = parcel;\n        }\n        return lookup;\n    }, [availableParcels]);\n\n    const unitsSoldValid = !applicableParcelIds.find(pid => !parcelSaleIsValid(availableParcelsLookup[pid], unitsSoldLookup[pid]));\n\n    const boundSave = () => save({\n        id: id ?? uuidv4(),\n        date,\n        asxCode,\n        applicableParcels: applicableParcelIds.map(pid => ({\n            id: pid,\n            unitsSold: parseInt(unitsSoldLookup[pid])\n        })),\n        memo,\n        unitPrice: parseFloat(unitPrice),\n        brokerage: parseFloat(brokerage)\n    });\n\n    const unitPriceValid = unitPrice && !isNaN(parseFloat(unitPrice));\n    const brokerageValid = brokerage && !isNaN(parseFloat(brokerage));\n\n    const valid = date && applicableParcelIds.length && unitPriceValid && brokerageValid && asxCode\n        && unitsSoldValid;\n\n    const canCalculatePerUnitCgtLiabilities = unitPriceValid && date && unitsSoldValid;\n\n    const perUnitCgtLiabilityLookup = useMemo(() => {\n        const lookup = {};\n        if(!canCalculatePerUnitCgtLiabilities) return {};\n        const floatUnitPrice = parseFloat(unitPrice);\n        for(const parcel of availableParcels) {\n            // Note: Deliberately not including brokerage in this figure since it would create a sort of\n            // chicken and egg situation where parcels are chosen by per-unit CGT liability, but this\n            // depends on the per-unit brokerage, which depends on the total number of parcels chosen\n            let liability = floatUnitPrice - parcel.perUnitCostBase;\n            lookup[parcel.id] = applyCgtDiscount(date, parcel.date, liability);\n        }\n        return lookup;\n    }, [unitPrice, date, availableParcels, canCalculatePerUnitCgtLiabilities]);\n\n    const orderedAvailableParcels = useMemo(() =>\n        orderBy(availableParcels, p => perUnitCgtLiabilityLookup[p.id]),\n    [availableParcels, perUnitCgtLiabilityLookup]);\n\n    let cgtLiability = null;\n    if(canCalculatePerUnitCgtLiabilities && brokerageValid) {\n        const args = {\n            unitPrice: parseFloat(unitPrice),\n            date,\n            brokerage: parseFloat(brokerage),\n            applicableParcels: applicableParcelIds.map(pid => ({\n                date: availableParcelsLookup[pid].date,\n                perUnitCostBase: availableParcelsLookup[pid].perUnitCostBase,\n                unitsSold: parseInt(unitsSoldLookup[pid])\n            }))\n        };\n        cgtLiability = calculateCgtLiability(args);\n    }\n\n    const rebuildUnitsSoldLookup = useCallback(newApplicableParcelIds => {\n        setUnitsSoldLookup(unitsSoldLookup => {\n            const newUnitsSoldLookup = {};\n            for(const parcelId of newApplicableParcelIds) {\n                newUnitsSoldLookup[parcelId] = unitsSoldLookup[parcelId] ?? availableParcelsLookup[parcelId].remainingUnits;\n            }\n            return newUnitsSoldLookup;\n        });\n    }, [availableParcelsLookup]);\n\n    useEffect(() => {\n        setApplicableParcelIds(ids => {\n            const newApplicableParcelIds = ids.filter(pid => orderedAvailableParcels.find(p => p.id === pid));\n            rebuildUnitsSoldLookup(newApplicableParcelIds);\n            return newApplicableParcelIds;\n        });\n    }, [orderedAvailableParcels, rebuildUnitsSoldLookup]);\n\n    const updateApplicableParcels = newApplicableParcelIds => {\n        setApplicableParcelIds(newApplicableParcelIds);\n        rebuildUnitsSoldLookup(newApplicableParcelIds);\n    }\n\n    const updateUnitsSold = (parcelId, newUnitsSold) => {\n        const newUnitsSoldLookup = { ...unitsSoldLookup };\n        newUnitsSoldLookup[parcelId] = newUnitsSold;\n        setUnitsSoldLookup(newUnitsSoldLookup);\n    }\n\n    return <>\n        <TableRow>\n            <TableCell/>\n            <TableCell align=\"right\">\n                <KeyboardDatePicker\n                    disableToolbar\n                    variant=\"inline\"\n                    format=\"YYYY-MM-DD\"\n                    label=\"Date\"\n                    value={date}\n                    error={!date}\n                    onChange={e => setDate(e.toJSON())}\n                />\n            </TableCell>\n            <TableCell align=\"right\">\n                <TextField value={asxCode} onChange={e => setAsxCode(e.target.value)} label=\"ASX Code\" error={!asxCode}/>\n            </TableCell>\n            <TableCell align=\"right\">\n                <Select\n                    disabled={!date || !orderedAvailableParcels.length || !asxCode}\n                    labelId=\"applicable-parcel-select\"\n                    label=\"Applicable Parcels\"\n                    error={!applicableParcelIds.length}\n                    multiple\n                    fullWidth\n                    value={applicableParcelIds}\n                    onChange={e => updateApplicableParcels(e.target.value)}\n                    renderValue={selected => selected.map(s => s).join(', ')}>\n                    {orderedAvailableParcels.map(p =>\n                        <MenuItem key={p.id} value={p.id}>\n                            <Checkbox\n                                checked={!!applicableParcelIds.includes(p.id)} />\n                            <ListItemText primary={`${p.id}${p.memo ? ': ' + p.memo : ''}`} secondary={`${p.remainingUnits} available, $${perUnitCgtLiabilityLookup[p.id]?.toFixed(4) ?? '??'}/u CGT`}/>\n                        </MenuItem>)}\n                </Select>\n            </TableCell>\n            <TableCell align=\"right\">\n                <TextField value={memo} onChange={e => setMemo(e.target.value)} label=\"Memo\"/>\n            </TableCell>\n            <TableCell align=\"right\">\n                <TextField type=\"number\" value={unitPrice} onChange={e => setUnitPrice(e.target.value)} error={!unitPriceValid} label=\"Unit Price ($/u)\"/>\n            </TableCell>\n            <TableCell align=\"right\">\n                <TextField type=\"number\" value={brokerage} onChange={e => setBrokerage(e.target.value)} error={!brokerageValid} label=\"Brokerage ($)\"/>\n            </TableCell>\n            <TableCell align=\"right\">\n                <Typography variant=\"body2\" color=\"primary\">Total: {cgtLiability?.toFixed(4) ?? '??'}</Typography>\n            </TableCell>\n            <TableCell align=\"right\" rowSpan={applicableParcelIds.length + 1}>\n                <IconButton onClick={boundSave} disabled={!valid}><Done/></IconButton>\n                <IconButton onClick={cancel}><Clear/></IconButton>\n            </TableCell>\n        </TableRow>\n        {applicableParcelIds.map(pid => \n            <ApplicableParcel\n                key={pid}\n                parcel={availableParcelsLookup[pid]}\n                perUnitCgtLiability={perUnitCgtLiabilityLookup[pid]}\n                unitsSold={unitsSoldLookup[pid]}\n                setUnitsSold={u => updateUnitsSold(pid, u)}/>\n        )}\n    </>;\n}\n\nfunction parcelSaleIsValid(parcel, unitsSold) {\n    if(!unitsSold) return false;\n    const soldFloat = parseFloat(unitsSold);\n    if(isNaN(soldFloat)) return false;\n    const soldInt = parseInt(unitsSold);\n    if(soldInt !== soldFloat) return false;\n    if(soldInt > (parcel?.remainingUnits ?? 0)) return false;\n    if(soldInt <= 0) return false;\n    return true;\n}\n\nfunction ApplicableParcel(props) {\n    const {\n        parcel,\n        perUnitCgtLiability,\n        unitsSold,\n        setUnitsSold\n    } = props;\n\n    const saleValid = parcelSaleIsValid(parcel, unitsSold);\n    const cgtLiability = (perUnitCgtLiability !== undefined && saleValid) ?\n        (perUnitCgtLiability * parseInt(unitsSold)).toFixed(4) : '??';\n\n    return <TableRow>\n        <TableCell/>\n        <TableCell/>\n        <TableCell/>\n        <TableCell align=\"right\">\n            <TextField\n                type=\"number\"\n                value={unitsSold}\n                onChange={e => setUnitsSold(e.target.value)}\n                error={!saleValid}\n                label={`Units of ${parcel?.id ?? '??'}`}\n                helperText={`${parcel?.remainingUnits ?? '??'} available`}/>\n        </TableCell>\n        <TableCell/>\n        <TableCell/>\n        <TableCell/>\n        <TableCell align=\"right\">\n            <Typography variant=\"body2\" color=\"primary\">{parcel?.id ?? '??'}: {cgtLiability}</Typography>\n        </TableCell>\n    </TableRow>\n}","import React from 'react';\n\nexport default function DonateButton() {\n    return <form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_top\">\n        <input type=\"hidden\" name=\"business\" value=\"VT6UPHJXTK3N2\" />\n        <input type=\"hidden\" name=\"no_recurring\" value=\"1\" />\n        <input type=\"hidden\" name=\"item_name\" value=\"CGT Calculator Thankyou\" />\n        <input type=\"hidden\" name=\"currency_code\" value=\"AUD\" />\n        <input type=\"image\" src=\"https://www.paypalobjects.com/en_AU/i/btn/btn_donate_LG.gif\" border=\"0\" name=\"submit\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\n        <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_AU/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n    </form>;\n}","import React from 'react';\nimport { Container, Typography } from '@material-ui/core';\nimport ParcelList from './components/parcelList';\nimport AdjustmentList from './components/adjustmentList';\nimport ImportExport from './components/importExport'\nimport SaleList from './components/saleList';\nimport DonateButton from './components/donateButton';\n\nfunction App() {\n    const repoUrl = 'https://github.com/judilsteve/asx-cgt-calculator-optimiser';\n    return (<Container maxWidth=\"xl\">\n        <br/>\n        <Typography variant=\"h2\">ASX CGT Calculator/Optimiser</Typography>\n        <br/>\n        <Typography variant=\"h6\">\n            This is a simple calculator that helps with record-keeping for your ASX holdings,\n            and calculation of CGT when selling.\n            <br/><br/>\n            All care has been taken to ensure that the calculations made here are correct and that they\n            conform to ATO requirements (as at 2021-07-10). I trust this calculator enough to use it for record-keeping\n            and CGT calculations of my own portfolio. However, I make no guarantee that the calculator is free from defects and accept\n            no liability for any consequences incurred by you of issues herein. Always check any values calculated here against\n            your own calculations.\n            <br/><br/>\n            If you find any issues with the calculator, please raise them <a href={`${repoUrl}/issues`}>here</a>.\n            <br/><br/>\n            If you find this calculator useful, and you want to show your appreciation, you can use the donation link below to shout me a coffee.\n            <br/><br/>\n            <DonateButton/>\n            <br/>\n            This calculator is a Single Page Application, or SPA. This means you can save the entire application to your computer\n            right now (press Ctrl+S on your keyboard) so that you still have access too the calculator even if this website\n            disappears from the internet.\n            <br/><br/>\n            This calculator is also free software licensed under the <a href={`${repoUrl}/blob/master/COPYING.md`}>Affero GPL</a>. You may view the source code <a href={repoUrl}>here</a>.\n            If you wish to use the source code as a basis for your own work, you may do so, but you must\n            adhere to the terms of the original license if you distribute your work.\n            <br/><br/>\n            Portfolio data is auto-saved to your browser's local storage: Your data does not leave your computer.\n            It is highly recommended that you export a backup of your portfolio data using the buttons below so that your\n            records are not lost if uninstall your browser, clear the local storage, lose your laptop, etc.\n        </Typography>\n        <br/>\n        <ImportExport/>\n        <br/><br/>\n        <Typography variant=\"h3\">Parcels</Typography>\n        <br/>\n        <Typography variant=\"h6\">\n            Enter details of all holdings (past and present) below, including dividend reinvestments.\n        </Typography>\n        <br/>\n        <ParcelList/>\n        <br/><br/>\n        <Typography variant=\"h3\">Cost Base Adjustments</Typography>\n        <br/>\n        <Typography variant=\"h6\">\n            Enter details of all cost base adjustments below (e.g. AMIT net adjustments from your annual tax statements).\n        </Typography>\n        <br/>\n        <AdjustmentList/>\n        <br/><br/>\n        <Typography variant=\"h3\">Sales</Typography>\n        <br/>\n        <Typography variant=\"h6\">\n            Enter details of all sale events below.\n        </Typography>\n        <br/>\n        <SaleList/>\n        <div style={{ height: '75vh' }}/>{/* Bit of dead space to let the user scroll content up higher for convenience */}\n    </Container>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DayjsUtils from '@date-io/dayjs';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiPickersUtilsProvider utils={DayjsUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}